generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String  @id
  firstName   String
  middleName  String?
  lastName    String
  email       String  @unique
  password    String
  userStatus  Int     @default(1)
  accessLevel Int     @default(0)
  CPF         String? @db.Char(11)

  cart            Cart[]
  favorites       Favorite[]
  ProductComments ProductComment[]
  CommentLikes    CommentLike[]
  Addresses       Address[]
}

model Address {
  addressId  String @id
  street     String
  number     String
  CEP        String @db.Char(8)
  complement String
  userId     String

  User User @relation(fields: [userId], references: [userId])
}

model Product {
  productId   String  @id 
  name        String
  category    String
  description String?
  price       Decimal @db.Decimal(9, 2)
  amount      Int?    @default(0)
  productStatus Int?   @default(1)

  cartProducts   CartProduct[]
  favorites      Favorite[]
  ProductComment ProductComment[]
  ProductPic     ProductPic[]
  
}

model ProductPic {
  productPicId String @id
  productPic   String
  productId    String

  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Cart {
  cartId     String   @id
  totalValue Decimal? @db.Decimal(9, 2)
  cartStatus Int      @default(1)
  userId     String

  User         User          @relation(fields: [userId], references: [userId])
  purchase     Purchase?
  cartProducts CartProduct[]
}

model CartProduct {
  cartProductId String @id
  amount        Int
  productId     String
  cartId        String

  Product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  Cart    Cart    @relation(fields: [cartId], references: [cartId])
}

model Purchase {
  purchaseId String   @id
  date       DateTime @default(now())
  cartId     String   @unique

  cart Cart @relation(fields: [cartId], references: [cartId])
}

model Favorite {
  favoriteId String @id
  productId  String
  userId     String

  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [userId])
}

model ProductComment {
  productCommentId String   @id
  comment          String?  @db.VarChar(255)
  date             DateTime @default(now())
  stars            Int
  productId        String
  userId           String

  product     Product       @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [userId])
  CommentPic  CommentPic[]
  CommentLike CommentLike[]
}

model CommentPic {
  commentPicId     String  @id
  picture          String?
  productCommentId String

  productComment ProductComment @relation(fields: [productCommentId], references: [productCommentId])
}

model CommentLike {
  commentLikeId    String @id
  userId           String
  productCommentId String

  user           User           @relation(fields: [userId], references: [userId])
  productComment ProductComment @relation(fields: [productCommentId], references: [productCommentId])
}
